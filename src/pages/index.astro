---
import Houston from "../components/Houston.astro";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Houston</title>
  </head>
  <body>
    <header class="container">
      <Houston glow />
      <div class="intro">
        <p>Hey! I'm <strong>Houston</strong></p>
        <p>Ask me anything about Astro</p>
      </div>
    </header>
    <main class="container">
      <ul class="chat"></ul>
    </main>
    <footer class="container">
      <form action="#" onsubmit="handleSubmit(event)">
        <div class="autogrow">
          <textarea
            id="message"
            name="message"
            onkeydown="handleKeydown(event)"
            oninput="this.parentNode.dataset.value = this.value"
            placeholder="How can I help?"
            cols="30"></textarea>
          <button type="submit">
            <svg
              width="24"
              height="24"
              viewBox="0 0 32 32"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>Send</title>
              <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M5.64161 2.18531C6.04591 2.14469 6.453 2.22818 6.80868 2.42468L6.81379 2.4275L27.9217 14.25L27.9244 14.2515C28.2358 14.4244 28.4954 14.6774 28.6764 14.9842C28.8578 15.292 28.9535 15.6427 28.9535 16C28.9535 16.3572 28.8578 16.708 28.6764 17.0157C28.4954 17.3226 28.2358 17.5756 27.9244 17.7485L27.9217 17.75L6.80869 29.5753C6.45301 29.7718 6.04591 29.8553 5.64161 29.8147C5.2373 29.774 4.85495 29.6112 4.54548 29.3479C4.236 29.0846 4.01408 28.7332 3.90925 28.3406C3.80455 27.9485 3.82162 27.5338 3.95818 27.1517L7.93379 16L3.95868 4.84968C3.82192 4.46735 3.8045 4.05166 3.90925 3.65933C4.01408 3.26675 4.236 2.9154 4.54548 2.65208C4.85496 2.38875 5.2373 2.22594 5.64161 2.18531ZM27.4376 15.125L26.9489 15.9975L5.84155 4.17529L5.84205 4.17668L9.8113 15.3106C9.98396 15.7539 9.98396 16.246 9.8113 16.6894L5.84155 27.8247L26.9489 16.0025L26.9535 16L27.4376 15.125Z"
                fill="currentColor"></path>
              <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M8 16C8 15.4477 8.44772 15 9 15H17C17.5523 15 18 15.4477 18 16C18 16.5523 17.5523 17 17 17H9C8.44772 17 8 16.5523 8 16Z"
                fill="currentColor"></path>
            </svg>
          </button>
        </div>
      </form>
    </footer>
    <template id="thumbs">
      <li class="thumbs">
        <button>
          <span
            ><svg
              width="32"
              height="33"
              viewBox="0 0 32 33"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>Thumbs Up</title>
              <path
                d="M26.745 10H20V8C20 5.2425 17.7575 3 15 3C14.6213 3 14.275 3.21375 14.105 3.5525L9.3825 13H4C2.8975 13 2 13.8975 2 15V26C2 27.1025 2.8975 28 4 28H25.2425C26.7438 27.9925 28.0175 26.865 28.205 25.3738L29.7038 13.3825C29.7213 13.25 29.73 13.115 29.73 12.98C29.7262 11.335 28.3863 10 26.745 10ZM3.99875 15H9V26H4V15H3.99875ZM27.7188 13.1263L26.2188 25.125C26.1562 25.6213 25.7312 25.9975 25.2362 26H11V14.2362L15.5887 5.0575C16.9625 5.3325 18 6.54625 18 8V11C18 11.5525 18.4475 12 19 12H26.7425C27.005 12 27.2525 12.1025 27.4387 12.2875C27.6262 12.4738 27.7287 12.7212 27.73 12.985C27.73 13.03 27.7275 13.0738 27.72 13.125L27.7188 13.1263Z"
                fill="currentColor"></path>
            </svg>
          </span>
        </button>
        <button>
          <span
            ><svg
              width="32"
              height="33"
              viewBox="0 0 32 33"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>Thumbs Down</title>
              <path
                d="M29.705 20.6263L28.205 8.625C28.0175 7.135 26.7437 6.0075 25.2375 6H4C2.8975 6 2 6.8975 2 8V19C2 20.1025 2.8975 21 4 21H9.3825L14.1062 30.4475C14.275 30.7863 14.6213 31 15.0013 31C17.7588 31 20.0012 28.7575 20.0012 26V24H26.7437C27.5387 24 28.2875 23.6912 28.8512 23.13C29.4162 22.5675 29.73 21.8175 29.7313 21.02C29.7313 20.885 29.7225 20.75 29.7062 20.6263H29.705ZM9 19H4V8H9V19ZM27.4387 21.7125C27.2512 21.8987 27.0012 21.995 26.7375 22H19C18.4475 22 18 22.4475 18 23V26C18 27.4525 16.9625 28.6675 15.5887 28.9425L11 19.765V8H25.2325C25.7325 8.0025 26.1575 8.37875 26.22 8.87375L27.7213 20.8825C27.7275 20.9262 27.73 20.97 27.73 21.015C27.73 21.2788 27.6262 21.5262 27.4387 21.7125Z"
                fill="currentColor"></path>
            </svg>
          </span>
        </button>
      </li>
    </template>

    <style>
      :root {
        --container-width: 640px;
        --chat-padding-top: 3rem;
      }
      :global(*) {
        box-sizing: border-box;
      }
      body {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
          Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue",
          sans-serif;
        display: flex;
        flex-direction: column;
        margin: 0;
        position: relative;
        background: #17191e;
        color-scheme: dark;
        height: 100vh;
        height: 100dvh;
        line-height: 1.33;
      }
      body::before {
        position: absolute;
        content: "";
        mix-blend-mode: overlay;
        opacity: 0.2;
        inset: 0;
        width: 100%;
        height: 100%;
        background: url(/whitenoise.png);
        background-repeat: repeat;
        pointer-events: none;
      }

      .container {
        width: 100%;
        max-width: var(--container-width);
        margin-left: auto;
        margin-right: auto;
      }
      header {
        flex-grow: 1;
        position: relative;
        margin: 4rem;
        margin-top: 4rem;
        display: flex;
        flex-direction: column;
        text-align: center;
        justify-content: center;
        align-items: center;
        margin-bottom: 0;
      }
      header.inactive {
        flex-grow: 0;
      }
      header.inactive + main {
        flex-grow: 1;
      }
      header.inactive .intro {
        display: none;
        opacity: 0;
        pointer-events: none;
        user-select: none;
      }
      .intro {
        font-size: 1.5rem;
        color: white;
        transition: opacity 500ms ease-out;
      }
      .intro p {
        margin: 0;
        margin-top: 0.5em;
      }
      .intro p:first-child {
        font-size: 2rem;
        margin-top: 2rem;
      }
      .intro strong {
        background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
      }
      .intro p:last-child {
        color: rgba(133, 139, 152, 1);
      }
      header::after {
        content: "";
        position: absolute;
        height: var(--chat-padding-top);
        bottom: calc(var(--chat-padding-top) * -1);
        left: 0;
        right: 0;
        background: linear-gradient(to bottom, #17191e, rgba(23, 25, 30, 0));
        z-index: 1;
      }
      main {
        padding-top: var(--chat-padding-top);
        padding-left: 1rem;
        padding-right: 1rem;
        padding-bottom: 2rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        overflow-y: auto;
      }
      footer {
        display: flex;
        position: relative;
      }

      footer button {
        position: absolute;
        right: 1rem;
        top: 1rem;
        --size: 2.5rem;
        width: var(--size);
        height: var(--size);
        border-radius: 50%;
        border: 0;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      footer svg {
        margin-right: -0.25rem;
      }

      .autogrow {
        display: grid;
      }
      .autogrow::after {
        content: attr(data-value) " ";
        white-space: pre-wrap;
        visibility: hidden;
        max-height: 25vh;
      }
      textarea {
        resize: none;
        overflow: hidden;
      }
      .autogrow > textarea,
      .autogrow::after {
        border-top-left-radius: 1rem;
        border-top-right-radius: 1rem;
        width: 100vw;
        max-width: var(--container-width);
        outline: 0;
        flex-grow: 1;
        padding: 1rem;
        font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
          Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue",
          sans-serif;
        font-size: 1.33rem;
        line-height: 1.25;
        border: 1px solid #343841;
        margin-left: -1px;
        margin-right: -1px;
        border-bottom: 0;

        background: #23262d;
        color: #bfc1c9;

        /* Place on top of each other */
        grid-area: 1 / 1 / 2 / 2;
      }
      .autogrow > textarea:focus {
        border-color: #bc52ee;
      }

      button {
        background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
      }

      .chat {
        margin-top: 1rem;
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 1rem;
        list-style: none;
        padding: 0;
        margin: 0;
      }
    </style>

    <style is:global>
      hey-houston {
        z-index: 2;
      }
      code {
        font-family: ui-monospace, Menlo, Monaco, "Cascadia Mono",
          "Segoe UI Mono", "Roboto Mono", "Oxygen Mono", "Ubuntu Monospace",
          "Source Code Pro", "Fira Mono", "Droid Sans Mono", "Courier New",
          monospace;
        padding: 0.125em 0.33em;
        border-radius: 0.33em;
        font-size: 0.95rem;
      }
      .chat > .message {
        --radius: 1.75rem;
        position: relative;
        border-radius: var(--radius);
        grid-column: span 4 / -1;
        padding: 1rem 1.5rem;
        animation: fade-in 300ms ease-out forwards;
      }
      .chat > .message::after {
        --size: 1rem;
        content: "";
        position: absolute;
        bottom: 0;
        height: var(--size);
        width: var(--size);
        z-index: 2;
      }
      .chat > .message.defer {
        animation: fade-in 300ms ease-out forwards,
          shake 400ms 150ms ease-out forwards;
      }
      .chat > .message[data-user] {
        background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
        border-bottom-right-radius: 0;
        color: white;
      }
      .chat > .message[data-user]::after {
        background: #bc52ee;
        right: calc(var(--size) * -1);
        border-bottom-right-radius: 8rem;
        background: radial-gradient(
          circle at top right,
          rgba(0, 0, 0, 0) 0,
          rgba(0, 0, 0, 0) var(--size),
          #bc52ee var(--size)
        );
      }
      .chat > .message:not([data-user])::after {
        border-top-left-radius: var(--size);
        border-bottom-left-radius: 8rem;
        background: radial-gradient(
          circle at top left,
          rgba(0, 0, 0, 0) 0,
          rgba(0, 0, 0, 0) var(--size),
          #d6d8e2 var(--size)
        );
        left: calc(var(--size) * -1);
      }
      .chat > .message[data-user] code {
        background: rgba(255 255 255 / 0.15);
      }
      .chat > .message:not([data-user]) {
        background: linear-gradient(180deg, #ffffff, #d6d8e2);
        border-bottom-left-radius: 0;
        grid-column: 1 / span 4;
      }
      .chat > .message:not([data-user]) code {
        background: rgba(0 0 0 / 0.075);
      }
      .message a {
        color: #3245ff;
      }
      .message a:where(:visited) {
        color: #bc52ee;
      }

      .sources {
        margin-top: 1rem;
        font-size: 0.9rem;
        display: flex;
        flex-flow: column;
        gap: 0.33em;
      }
      .sources > a {
        display: block;
        color: #23262d;
      }
      .sources > a:is(:hover, :focus) {
        color: rgba(23, 25, 30, 1);
      }
      @keyframes fade-in {
        from {
          opacity: 0;
          transform: translateY(1rem);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      @keyframes shake {
        0% {
          transform: translateX(0);
        }
        25% {
          transform: translateX(0.75rem);
        }
        50% {
          transform: translateX(-0.75rem);
        }
        75% {
          transform: translateX(0.75rem);
        }
        100% {
          transform: translateX(0);
        }
      }
    </style>

    <script>
      import { chat } from "../chat";
      import snarkdown from "snarkdown";

      const header = document.querySelector("header")!;
      const houston = document.querySelector("hey-houston")!;
      // const thumbs = document.querySelector(
      //   "template#thumbs"
      // )! as HTMLTemplateElement;
      const h = (
        tag: string,
        props: Record<string, any> = {},
        ...children: any[]
      ) => {
        const node = document.createElement(tag);
        for (const [key, value] of Object.entries(props)) {
          node.setAttribute(key, value);
        }
        for (const child of children) {
          if (child instanceof Node) {
            node.appendChild(child);
          } else if (child || child === 0) {
            node.innerHTML = child;
          }
        }
        return node;
      };
      const rand = (arr: any[]) => arr[Math.floor(Math.random() * arr.length)];
      const messages = document.querySelector(".chat") as HTMLDivElement;

      const avoid = [
        "Sorry, I'm not sure about that one.",
        "Hmm... I don't know!",
        "Huh, that's one even I don't know!",
        "Wow, that's a tough one...",
        "Unfortunately, I have no idea.",
        "Hmm, I'm not sure.",
      ];

      async function handleSubmit(event: Event) {
        event.preventDefault();
        const form = event.target as HTMLFormElement;
        const textarea = form.message as HTMLTextAreaElement;
        const message = textarea.value;
        if (!message.trim()) return;

        const bubble = h(
          "li",
          { class: "message", "data-user": "" },
          snarkdown(message)
        );
        messages.appendChild(bubble);
        bubble.scrollIntoView();
        header.classList.add("inactive");

        textarea.value = "";
        textarea.focus();

        const thinking = houston.think();
        let emote: string = "default";
        try {
          const res = await chat(message);
          emote = res.valid ? "haapy" : "disappointed";
          if (!res.valid) {
            const bubble = h(
              "li",
              { class: "message defer" },
              `${rand(avoid)}`
            );
            messages.appendChild(bubble);
            bubble.scrollIntoView();
          } else {
            const sources = res.sources.map(({ url, title }) =>
              h("a", { target: "_blank", href: url }, title)
            );
            const bubble = h(
              "li",
              { class: "message" },
              snarkdown(res.answer),
              sources.length > 0
                ? h("div", { class: "sources" }, ...sources)
                : undefined
            );
            messages.appendChild(bubble);
            // messages.appendChild(thumbs.content.cloneNode(true));
            bubble.scrollIntoView();
          }
        } catch (err) {
          emote = "cry";
          const bubble = h(
            "li",
            { class: "message error" },
            `Something went wrong! Please try again.`
          );
          messages.appendChild(bubble);
          bubble.scrollIntoView();
        } finally {
          thinking.stop();
          houston.emote(emote);
          setTimeout(() => houston.emote("default"), 1250);
        }
      }

      function handleKeydown(event: KeyboardEvent) {
        if (event.shiftKey) return;
        if (event.key !== "Enter") return;
        event.preventDefault();
        (event.target as HTMLElement).closest("form")!.requestSubmit();
      }

      globalThis.handleSubmit = handleSubmit;
      globalThis.handleKeydown = handleKeydown;
    </script>
  </body>
</html>
